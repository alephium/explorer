{"version":3,"sources":["components/NotificationBar.tsx","serviceWorker.js","utils/browserSupport.ts","index.tsx","utils/hooks.ts","types/network.ts","utils/client.ts","contexts/global.tsx"],"names":["NotificationBar","className","children","styled","Boolean","window","location","hostname","match","browserIsOld","flex","document","createElement","style","display","flexDirection","rowGap","appendChild","body","isSupported","scrollHeight","parentNode","removeChild","isFlexGapSupported","BigInt","ReactDOM","render","getElementById","then","App","default","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","useInterval","callback","delay","shouldPause","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useStateWithLocalStorage","localStorageKey","defaultValue","useState","localStorage","getItem","value","setValue","setItem","networkTypes","AlephClient","url","fetchAPI","this","path","a","fetch","resp","Promise","resolve","reject","ok","json","r","data","status","e","detail","resource","page","GlobalContext","createContext","client","undefined","explorerClient","networkType","currentTheme","switchTheme","snackbarMessage","setSnackbarMessage","timestampPrecisionMode","setTimestampPrecisionMode","GlobalContextProvider","themeName","setThemeName","setClient","setExplorerClient","setNetworkType","process","REACT_APP_BACKEND_URL","REACT_APP_NETWORK_TYPE","Error","includes","ExplorerClient","baseUrl","log","createClient","setTimeout","duration","Provider","useGlobalContext","useContext"],"mappings":"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","file":"static/js/main.29784d99.chunk.js","sourcesContent":["/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FC } from 'react'\nimport styled from 'styled-components'\n\nlet NotificationBar: FC<{ className?: string }> = ({ className, children }) => {\n  return <div className={className}>{children}</div>\n}\n\nNotificationBar = styled(NotificationBar)`\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n  padding: 20px;\n`\n\nexport default NotificationBar\n","// Copyright 2018 The Alephium Authors\n// This file is part of the alephium project.\n//\n// The library is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// The library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the library. If not, see <http://www.gnu.org/licenses/>.\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport const isFlexGapSupported = () => {\n  const flex = document.createElement('div')\n  flex.style.display = 'flex'\n  flex.style.flexDirection = 'column'\n  flex.style.rowGap = '1px'\n  flex.appendChild(document.createElement('div'))\n  flex.appendChild(document.createElement('div'))\n  document.body.appendChild(flex)\n\n  const isSupported = flex.scrollHeight === 1\n\n  if (flex.parentNode) {\n    flex.parentNode.removeChild(flex)\n  }\n\n  return isSupported\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport './fonts/index.css'\n\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router } from 'react-router-dom'\n\nimport NotificationBar from './components/NotificationBar'\nimport { GlobalContextProvider } from './contexts/global'\nimport * as serviceWorker from './serviceWorker'\nimport { isFlexGapSupported } from './utils/browserSupport'\n\nlet browserIsOld = !isFlexGapSupported()\n\ntry {\n  BigInt(1)\n} catch {\n  browserIsOld = true\n}\n\nif (browserIsOld) {\n  ReactDOM.render(\n    <NotificationBar>\n      Your browser version appears to be out of date. To use our app, please update your browser.\n    </NotificationBar>,\n    document.getElementById('root')\n  )\n} else {\n  import('./App').then(({ default: App }) => {\n    ReactDOM.render(\n      <Router>\n        <GlobalContextProvider>\n          <App />\n        </GlobalContextProvider>\n      </Router>,\n      document.getElementById('root')\n    )\n  })\n}\n\n//\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { useEffect, useRef, useState } from 'react'\n\nexport function useInterval(callback: () => void, delay: number, shouldPause = false) {\n  const savedCallback = useRef<() => void>(() => null)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null && !shouldPause) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay, shouldPause])\n}\n\nexport function useStateWithLocalStorage<T extends string>(localStorageKey: string, defaultValue: T) {\n  const [value, setValue] = useState(localStorage.getItem(localStorageKey) || defaultValue)\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, value)\n  }, [localStorageKey, value])\n\n  return [value as T, setValue] as const\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport const networkTypes = ['testnet', 'mainnet'] as const\n\nexport type NetworkType = typeof networkTypes[number]\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction } from 'alephium-js/dist/api/api-explorer'\n\nimport { Address, Block, BlockList } from '../types/api'\n\nexport interface APIData<T> {\n  data: T\n  status: number\n  resource?: never\n  detail?: never\n}\n\nexport interface APIError {\n  status: number\n  detail: string\n  resource?: string\n  data?: never\n}\n\nexport type APIResp<T> = APIData<T> | APIError\n\nexport class AlephClient {\n  url: string\n  fetchAPI: <T>(path: string) => Promise<APIResp<T>>\n\n  constructor(url: string) {\n    this.url = url\n    this.fetchAPI = async function <T>(path: string) {\n      return fetch(url + path)\n        .then((resp) => {\n          return new Promise((resolve, reject) => {\n            if (resp.ok) {\n              resp.json().then((r) => resolve({ data: r as T, status: resp.status }))\n            } else {\n              resp.json().then((e) => {\n                return reject({ detail: e.detail, status: resp.status, resource: e.resource } as APIError)\n              })\n            }\n          }) as Promise<APIResp<T>>\n        })\n        .catch((e) => {\n          return e as APIError\n        })\n    }\n  }\n\n  async block(id: string) {\n    return await this.fetchAPI<Block>('/blocks/' + id)\n  }\n\n  async blockTransactions(id: string, page: number) {\n    return await this.fetchAPI<Transaction[]>('/blocks/' + id + '/transactions' + '?page=' + page)\n  }\n\n  async blocks(page: number) {\n    return await this.fetchAPI<BlockList>('/blocks?page=' + page)\n  }\n\n  async address(id: string) {\n    return await this.fetchAPI<Address>('/addresses/' + id)\n  }\n\n  async addressTransactions(id: string, page: number) {\n    return await this.fetchAPI<Transaction[]>('/addresses/' + id + '/transactions' + '?page=' + page)\n  }\n\n  async transaction(id: string) {\n    return await this.fetchAPI<Transaction>('/transactions/' + id)\n  }\n}\n\nexport const createClient = (url: string) => {\n  const client = new AlephClient(url)\n\n  console.log('Connecting to: ' + client.url)\n\n  return client\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ExplorerClient } from 'alephium-js'\nimport { createContext, FC, useContext, useEffect, useState } from 'react'\n\nimport { ThemeType } from '../style/themes'\nimport { OnOff } from '../types/generics'\nimport { NetworkType, networkTypes } from '../types/network'\nimport { SnackbarMessage } from '../types/ui'\nimport { AlephClient, createClient } from '../utils/client'\nimport { useStateWithLocalStorage } from '../utils/hooks'\n\ninterface GlobalContextInterface {\n  client: AlephClient | undefined\n  explorerClient: ExplorerClient | undefined\n  networkType: NetworkType | undefined\n  currentTheme: ThemeType\n  switchTheme: (arg0: ThemeType) => void\n  snackbarMessage: SnackbarMessage | undefined\n  setSnackbarMessage: (message: SnackbarMessage) => void\n  timestampPrecisionMode: OnOff\n  setTimestampPrecisionMode: (status: OnOff) => void\n}\n\nexport const GlobalContext = createContext<GlobalContextInterface>({\n  client: undefined,\n  explorerClient: undefined,\n  networkType: undefined,\n  currentTheme: 'dark',\n  switchTheme: () => null,\n  snackbarMessage: undefined,\n  setSnackbarMessage: () => null,\n  timestampPrecisionMode: 'off',\n  setTimestampPrecisionMode: () => null\n})\n\nexport const GlobalContextProvider: FC = ({ children }) => {\n  const [themeName, setThemeName] = useStateWithLocalStorage<ThemeType>('theme', 'dark')\n  const [client, setClient] = useState<AlephClient>()\n  const [explorerClient, setExplorerClient] = useState<ExplorerClient>()\n  const [networkType, setNetworkType] = useState<NetworkType>()\n  const [snackbarMessage, setSnackbarMessage] = useState<SnackbarMessage | undefined>()\n  const [timestampPrecisionMode, setTimestampPrecisionMode] = useStateWithLocalStorage<OnOff>(\n    'timestampPrecisionMode',\n    'off'\n  )\n\n  useEffect(() => {\n    // Check and apply environment variables\n    const url: string | null | undefined = process.env.REACT_APP_BACKEND_URL\n    const networkType = process.env.REACT_APP_NETWORK_TYPE as NetworkType | undefined\n\n    if (!url) {\n      throw new Error('The REACT_APP_BACKEND_URL environment variable must be defined')\n    }\n\n    if (!networkType) {\n      throw new Error('The REACT_APP_NETWORK_TYPE environment variable must be defined')\n    } else if (!networkTypes.includes(networkType)) {\n      throw new Error('Value of the REACT_APP_NETWORK_TYPE environment variable is invalid')\n    }\n\n    try {\n      setExplorerClient(new ExplorerClient({ baseUrl: url }))\n    } catch (error) {\n      throw new Error('Could not create explorer client')\n    }\n\n    setClient(createClient(url))\n    setNetworkType(networkType)\n  }, [])\n\n  // Remove snackbar popup\n  useEffect(() => {\n    if (snackbarMessage) {\n      setTimeout(() => setSnackbarMessage(undefined), snackbarMessage.duration || 3000)\n    }\n  }, [snackbarMessage])\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        client,\n        explorerClient,\n        networkType,\n        currentTheme: themeName as ThemeType,\n        switchTheme: setThemeName as (arg0: ThemeType) => void,\n        snackbarMessage,\n        setSnackbarMessage,\n        timestampPrecisionMode,\n        setTimestampPrecisionMode\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\nexport const useGlobalContext = () => useContext(GlobalContext)\n"],"sourceRoot":""}