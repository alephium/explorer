{"version":3,"sources":["hooks/useStateWithLocalStorage.ts","types/network.ts","contexts/global.tsx"],"names":["useStateWithLocalStorage","localStorageKey","defaultValue","useState","localStorage","getItem","value","setValue","useEffect","setItem","networkTypes","GlobalContext","createContext","client","undefined","networkType","currentTheme","switchTheme","snackbarMessage","setSnackbarMessage","timestampPrecisionMode","setTimestampPrecisionMode","GlobalContextProvider","children","themeName","setThemeName","setClient","setNetworkType","url","process","netType","includes","Error","ExplorerClient","baseUrl","error","setTimeout","duration","Provider","useGlobalContext","useContext"],"mappings":"weA6BeA,EAVkB,SAAmBC,EAAyBC,GAC3E,MAA0BC,mBAASC,aAAaC,QAAQJ,IAAoBC,GAA5E,mBAAOI,EAAP,KAAcC,EAAd,KAMA,OAJAC,qBAAU,WACRJ,aAAaK,QAAQR,EAAiBK,KACrC,CAACL,EAAiBK,IAEd,CAACA,EAAYC,ICRTG,EAAe,CAAC,UAAW,W,OCoB3BC,EAAgBC,wBAAsC,CACjEC,YAAQC,EACRC,iBAAaD,EACbE,aAAc,QACdC,YAAa,kBAAM,MACnBC,qBAAiBJ,EACjBK,mBAAoB,kBAAM,MAC1BC,uBAAwB,MACxBC,0BAA2B,kBAAM,QAGtBC,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,EAAkCvB,EAAoC,QAAS,SAA/E,mBAAOwB,EAAP,KAAkBC,EAAlB,KACA,EAA4BtB,qBAA5B,mBAAOU,EAAP,KAAea,EAAf,KACA,EAAsCvB,qBAAtC,mBAAOY,EAAP,KAAoBY,EAApB,KACA,EAA8CxB,qBAA9C,mBAAOe,EAAP,KAAwBC,EAAxB,KACA,EAA4DnB,EAC1D,yBACA,OAFF,mBAAOoB,EAAP,KAA+BC,EAA/B,KAoCA,OA/BAb,qBAAU,WAER,IAAMoB,EAAiCC,uCACjCC,EAAUD,UAQT,IAAKnB,EAAaqB,SAASD,GAChC,MAAM,IAAIE,MAAM,uEAGlB,IACEN,EAAU,IAAIO,iBAAe,CAAEC,QAASN,KACxC,MAAOO,GACP,MAAM,IAAIH,MAAM,oCAGlBL,EAAeG,KACd,IAGHtB,qBAAU,WACJU,GACFkB,YAAW,kBAAMjB,OAAmBL,KAAYI,EAAgBmB,UAAY,OAE7E,CAACnB,IAGF,cAACP,EAAc2B,SAAf,CACEhC,MAAO,CACLO,SACAE,cACAC,aAAcQ,EACdP,YAAaQ,EACbP,kBACAC,qBACAC,yBACAC,6BATJ,SAYGE,KAKMgB,EAAmB,kBAAMC,qBAAW7B","file":"static/js/6.8a7e5dc9.chunk.js","sourcesContent":["/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { useEffect, useState } from 'react'\n\nconst useStateWithLocalStorage = <T extends string>(localStorageKey: string, defaultValue: T) => {\n  const [value, setValue] = useState(localStorage.getItem(localStorageKey) || defaultValue)\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, value)\n  }, [localStorageKey, value])\n\n  return [value as T, setValue] as const\n}\n\nexport default useStateWithLocalStorage\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport const networkTypes = ['testnet', 'mainnet'] as const\n\nexport type NetworkType = typeof networkTypes[number]\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ExplorerClient } from '@alephium/sdk'\nimport { createContext, FC, useContext, useEffect, useState } from 'react'\n\nimport useStateWithLocalStorage from '../hooks/useStateWithLocalStorage'\nimport { ThemeType } from '../style/themes'\nimport { OnOff } from '../types/generics'\nimport { NetworkType, networkTypes } from '../types/network'\nimport { SnackbarMessage } from '../types/ui'\n\ninterface GlobalContextInterface {\n  client: ExplorerClient | undefined\n  networkType: NetworkType | undefined\n  currentTheme: ThemeType\n  switchTheme: (arg0: ThemeType) => void\n  snackbarMessage: SnackbarMessage | undefined\n  setSnackbarMessage: (message: SnackbarMessage) => void\n  timestampPrecisionMode: OnOff\n  setTimestampPrecisionMode: (status: OnOff) => void\n}\n\nexport const GlobalContext = createContext<GlobalContextInterface>({\n  client: undefined,\n  networkType: undefined,\n  currentTheme: 'light',\n  switchTheme: () => null,\n  snackbarMessage: undefined,\n  setSnackbarMessage: () => null,\n  timestampPrecisionMode: 'off',\n  setTimestampPrecisionMode: () => null\n})\n\nexport const GlobalContextProvider: FC = ({ children }) => {\n  const [themeName, setThemeName] = useStateWithLocalStorage<ThemeType>('theme', 'light')\n  const [client, setClient] = useState<ExplorerClient>()\n  const [networkType, setNetworkType] = useState<NetworkType>()\n  const [snackbarMessage, setSnackbarMessage] = useState<SnackbarMessage | undefined>()\n  const [timestampPrecisionMode, setTimestampPrecisionMode] = useStateWithLocalStorage<OnOff>(\n    'timestampPrecisionMode',\n    'off'\n  )\n\n  useEffect(() => {\n    // Check and apply environment variables\n    const url: string | null | undefined = process.env.REACT_APP_BACKEND_URL\n    const netType = process.env.REACT_APP_NETWORK_TYPE as NetworkType | undefined\n\n    if (!url) {\n      throw new Error('The REACT_APP_BACKEND_URL environment variable must be defined')\n    }\n\n    if (!netType) {\n      throw new Error('The REACT_APP_NETWORK_TYPE environment variable must be defined')\n    } else if (!networkTypes.includes(netType)) {\n      throw new Error('Value of the REACT_APP_NETWORK_TYPE environment variable is invalid')\n    }\n\n    try {\n      setClient(new ExplorerClient({ baseUrl: url }))\n    } catch (error) {\n      throw new Error('Could not create explorer client')\n    }\n\n    setNetworkType(netType)\n  }, [])\n\n  // Remove snackbar popup\n  useEffect(() => {\n    if (snackbarMessage) {\n      setTimeout(() => setSnackbarMessage(undefined), snackbarMessage.duration || 3000)\n    }\n  }, [snackbarMessage])\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        client,\n        networkType,\n        currentTheme: themeName as ThemeType,\n        switchTheme: setThemeName as (arg0: ThemeType) => void,\n        snackbarMessage,\n        setSnackbarMessage,\n        timestampPrecisionMode,\n        setTimestampPrecisionMode\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\nexport const useGlobalContext = () => useContext(GlobalContext)\n"],"sourceRoot":""}