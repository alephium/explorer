{"version":3,"sources":["components/NotificationBar.tsx","serviceWorker.js","utils/browserSupport.ts","index.tsx"],"names":["NotificationBar","className","children","styled","Boolean","window","location","hostname","match","browserIsOld","flex","document","createElement","style","display","flexDirection","rowGap","appendChild","body","isSupported","scrollHeight","parentNode","removeChild","isFlexGapSupported","BigInt","ReactDOM","render","getElementById","then","App","default","GlobalContextProvider","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAqBIA,EAA8C,YAA8B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC9D,OAAO,qBAAKD,UAAWA,EAAhB,SAA4BC,KAUtBF,EAPfA,EAAkBG,kBAAOH,EAAPG,CAAH,yGCGKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCf5B,ICSHC,GDT8B,WAChC,IAAMC,EAAOC,SAASC,cAAc,OACpCF,EAAKG,MAAMC,QAAU,OACrBJ,EAAKG,MAAME,cAAgB,SAC3BL,EAAKG,MAAMG,OAAS,MACpBN,EAAKO,YAAYN,SAASC,cAAc,QACxCF,EAAKO,YAAYN,SAASC,cAAc,QACxCD,SAASO,KAAKD,YAAYP,GAE1B,IAAMS,EAAoC,IAAtBT,EAAKU,aAMzB,OAJIV,EAAKW,YACPX,EAAKW,WAAWC,YAAYZ,GAGvBS,ECNWI,GAEpB,IACEC,OAAO,GACP,SACAf,GAAe,EAGbA,EACFgB,IAASC,OACP,cAAC,EAAD,0GAGAf,SAASgB,eAAe,SAG1B,2DAAgBC,MAAK,YAAuB,IAAXC,EAAU,EAAnBC,QACtB,mDAA4BF,MAAK,YAAgC,IAA7BG,EAA4B,EAA5BA,sBAClCN,IAASC,OACP,cAAC,IAAD,UACE,cAACK,EAAD,UACE,cAACF,EAAD,QAGJlB,SAASgB,eAAe,eFyF1B,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBN,MAAK,SAACO,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.150fad73.chunk.js","sourcesContent":["/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FC } from 'react'\nimport styled from 'styled-components'\n\nlet NotificationBar: FC<{ className?: string }> = ({ className, children }) => {\n  return <div className={className}>{children}</div>\n}\n\nNotificationBar = styled(NotificationBar)`\n  width: 100%;\n  font-size: 1rem;\n  text-align: center;\n  padding: 20px;\n`\n\nexport default NotificationBar\n","// Copyright 2018 The Alephium Authors\n// This file is part of the alephium project.\n//\n// The library is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// The library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the library. If not, see <http://www.gnu.org/licenses/>.\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nexport const isFlexGapSupported = () => {\n  const flex = document.createElement('div')\n  flex.style.display = 'flex'\n  flex.style.flexDirection = 'column'\n  flex.style.rowGap = '1px'\n  flex.appendChild(document.createElement('div'))\n  flex.appendChild(document.createElement('div'))\n  document.body.appendChild(flex)\n\n  const isSupported = flex.scrollHeight === 1\n\n  if (flex.parentNode) {\n    flex.parentNode.removeChild(flex)\n  }\n\n  return isSupported\n}\n","/*\nCopyright 2018 - 2022 The Alephium Authors\nThis file is part of the alephium project.\n\nThe library is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThe library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with the library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport './fonts/index.css'\n\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router } from 'react-router-dom'\n\nimport NotificationBar from './components/NotificationBar'\nimport * as serviceWorker from './serviceWorker'\nimport { isFlexGapSupported } from './utils/browserSupport'\n\nlet browserIsOld = !isFlexGapSupported()\n\ntry {\n  BigInt(1)\n} catch {\n  browserIsOld = true\n}\n\nif (browserIsOld) {\n  ReactDOM.render(\n    <NotificationBar>\n      Your browser version appears to be out of date. To use our app, please update your browser.\n    </NotificationBar>,\n    document.getElementById('root')\n  )\n} else {\n  import('./App').then(({ default: App }) => {\n    import('./contexts/global').then(({ GlobalContextProvider }) => {\n      ReactDOM.render(\n        <Router>\n          <GlobalContextProvider>\n            <App />\n          </GlobalContextProvider>\n        </Router>,\n        document.getElementById('root')\n      )\n    })\n  })\n}\n\n//\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}